
R version 3.2.1 (2015-06-18) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(nimble)

Attaching package: ‘nimble’

The following object is masked from ‘package:stats’:

    simulate

The following object is masked from ‘package:base’:

    deparse

> source("autoBlock.R")
Warning messages:
1: In .recacheSubclasses(def@className, def, doSubclasses, env) :
  undefined subclass "autoBlockModel" of class "refObject"; definition not updated
2: In .recacheSubclasses(def@className, def, doSubclasses, env) :
  undefined subclass "autoBlockModel" of class "refObject"; definition not updated
3: In .recacheSubclasses(def@className, def, doSubclasses, env) :
  undefined subclass "autoBlockClass" of class "refObject"; definition not updated
> niter <- 1000
> keepInd <- (niter/2 + 1):niter
> dfcomputationalRequirement <- data.frame()
> Nvalues <- c(2, 3)
> for (dist in c("uni", "multi", "gamma")) {
+     for (N in Nvalues) {
+         if (dist == "uni") 
+             candc <- createCodeAndConstants(N)
+         if (dist == "multi") 
+             candc <- createCodeAndConstants(N, list(1:N), 0)
+         if (dist == "gamma") 
+             candc <- createCodeAndConstants(N, gammaScalars = TRUE)
+         code <- candc$code
+         constants <- candc$constants
+         data <- list()
+         inits <- list(x = rep(1, N))
+         Rmodel <- nimbleModel(code = code, constants = constants, data = data, inits = inits)
+         nodeNames <- Rmodel$expandNodeNames("x", returnScalarComponents = TRUE)
+         specList <- list()
+         for (i in 1:3) specList[[i]] <- configureMCMC(Rmodel, nodes = NULL)
+         for (node in nodeNames) specList[[1]]$addSampler("RW", list(targetNode = node), print = FALSE)
+         specList[[2]]$addSampler("RW_block", list(targetNodes = nodeNames, adaptScaleOnly = TRUE), print = FALSE)
+         specList[[3]]$addSampler("RW_block", list(targetNodes = nodeNames), print = FALSE)
+         toCompileList <- list(Rmodel)
+         for (i in 1:3) toCompileList[[i + 1]] <- buildMCMC(specList[[i]])
+         compiledList <- compileNimble(toCompileList)
+         Cmodel <- compiledList[[1]]
+         Cmcmcs <- compiledList[2:4]
+         timePer10kN <- numeric(0)
+         for (i in 1:3) {
+             Cmodel$setInits(inits)
+             set.seed(0)
+             timing <- as.numeric(system.time(Cmcmcs[[i]]$run(niter))[1])
+             timePer10kN[i] <- timing/(niter/10000)
+         }
+         thisDF <- data.frame(N = rep(N, 3), dist = rep(dist, 3), blocking = c("scalar", "blockNoAdapt", "blockAdapt"), timePer10kN = timePer10kN)
+         dfcomputationalRequirement <- rbind(dfcomputationalRequirement, thisDF)
+         save(dfcomputationalRequirement, file = file.path("results_hclust_single", "results_computationalRequirement.RData"))
+         cat("\n")
+         print(dfcomputationalRequirement)
+     }
+ }
defining model...
building model...
setting data and initial values...
checking model...   (use nimbleModel(..., check = FALSE) to skip model check)
model building finished
Error in specList[[1]]$addSampler("RW", list(targetNode = node), print = FALSE) : 
  sampler type must be character name or function
In addition: Warning messages:
1: In .recacheSubclasses(def@className, def, doSubclasses, env) :
  undefined subclass "autoBlockModel" of class "refObject"; definition not updated
2: In .recacheSubclasses(def@className, def, doSubclasses, env) :
  undefined subclass "autoBlockClass" of class "refObject"; definition not updated
3: In .recacheSubclasses(def@className, def, doSubclasses, env) :
  undefined subclass "autoBlockModel" of class "refObject"; definition not updated
4: In .recacheSubclasses(def@className, def, doSubclasses, env) :
  undefined subclass "autoBlockClass" of class "refObject"; definition not updated
5: In .recacheSubclasses(def@className, def, doSubclasses, env) :
  undefined subclass "autoBlockModel" of class "refObject"; definition not updated
6: In .recacheSubclasses(def@className, def, doSubclasses, env) :
  undefined subclass "autoBlockClass" of class "refObject"; definition not updated
7: In .recacheSubclasses(def@className, def, doSubclasses, env) :
  undefined subclass "autoBlockModel" of class "refObject"; definition not updated
8: In .recacheSubclasses(def@className, def, doSubclasses, env) :
  undefined subclass "autoBlockClass" of class "refObject"; definition not updated
Execution halted
